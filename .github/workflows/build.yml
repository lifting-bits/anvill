#
# Copyright (c) 2021-present, Trail of Bits, Inc.
# All rights reserved.
#
# This source code is licensed in accordance with the terms specified in
# the LICENSE file found in the root directory of this source tree.
#

name: Build

on:
  # Run this workflow once every 6 hours against the master branch
  schedule:
   - cron: "0 */6 * * *"

  push:
    branches:
      - '*'

    tags:
      - '*'

  pull_request:
    branches:
      - '*'




jobs:
  cleanup_stale_workflows:
    runs-on: ubuntu-20.04

    steps:
      - name: Clone the anvill repository
        uses: actions/checkout@v2

      - name: Install Python dependencies
        run: |
          pip install requests

      - name: Cancel old workflow runs

        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

        run: |
          python3 .github/scripts/abort_previous_workflows.py




  build_linux:
    needs: cleanup_stale_workflows

    strategy:
      fail-fast: false
      matrix:
        image:
          - { name: 'ubuntu', tag: '18.04' }
          - { name: 'ubuntu', tag: '20.04' }

        llvm: [ '9', '10', '11' ]
        cxxcommon_version: [ 'v0.1.1' ]

    runs-on: ubuntu-20.04
    container:
      image: docker.pkg.github.com/trailofbits/cxx-common/vcpkg-builder-${{ matrix.image.name }}:${{ matrix.image.tag }}

      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Setup the build paths
        shell: bash
        id: build_paths
        run: |
          rel_build_path="build"
          rel_source_path="src"
          rel_install_path="install"
          rel_downloads_path="downloads"
          rel_ccache_path="ccache"

          mkdir -p ${rel_build_path} \
                   ${rel_install_path} \
                   ${rel_downloads_path} \
                   ${rel_ccache_path}

          echo ::set-output name=SOURCE::$(pwd)/${rel_source_path}
          echo ::set-output name=REL_SOURCE::${rel_source_path}
          echo ::set-output name=BUILD::$(pwd)/${rel_build_path}
          echo ::set-output name=REL_BUILD::${rel_build_path}
          echo ::set-output name=INSTALL::$(pwd)/${rel_install_path}
          echo ::set-output name=DOWNLOADS::$(pwd)/${rel_downloads_path}
          echo ::set-output name=CCACHE::$(pwd)/${rel_ccache_path}

      - name: Update the cache (downloads)
        uses: actions/cache@v2
        with:
          path: ${{ steps.build_paths.outputs.DOWNLOADS }}

          key: |
            gitmodules_${{ matrix.image.name }}_${{ matrix.image.tag }}_${{ matrix.llvm }}_${{ github.sha }}

          restore-keys: |
            gitmodules_${{ matrix.image.name }}_${{ matrix.image.tag }}_${{ matrix.llvm }}

      - name: Update the cache (ccache)
        uses: actions/cache@v2
        with:
          path: ${{ steps.build_paths.outputs.CCACHE }}

          key: |
            gitmodules_${{ matrix.image.name }}_${{ matrix.image.tag }}_${{ matrix.llvm }}_${{ github.sha }}

          restore-keys: |
            gitmodules_${{ matrix.image.name }}_${{ matrix.image.tag }}_${{ matrix.llvm }}

      # TODO(alessandro): Remove this step once the dependencies have been embedded in the container image
      - name: Install system dependencies
        shell: bash
        run: |
          apt-get update
          apt-get install -y pixz \
                             xz-utils \
                             make \
                             ninja-build \
                             ccache \
                             rpm

      - name: Clone the anvill repository
        uses: actions/checkout@v2
        with:
          path: ${{ steps.build_paths.outputs.REL_SOURCE }}/anvill
          fetch-depth: 0
          submodules: true

      - name: Clone the remill repository
        uses: actions/checkout@v2
        with:
          repository: 'lifting-bits/remill'
          path: ${{ steps.build_paths.outputs.REL_SOURCE }}/remill
          fetch-depth: 0

      - name: Select the remill version
        run: |
          remill_commit_id_path="${{ steps.build_paths.outputs.SOURCE }}/anvill/.remill_commit_id"

          if [[ -f "${remill_commit_id_path}" ]] ; then
            remill_commit_id=$(cat ${remill_commit_id_path})
            echo "Using the following remill commit: ${remill_commit_id}"

            cd ${{ steps.build_paths.outputs.SOURCE }}/remill
            git checkout -b remill_commit_id "${remill_commit_id}"

          else
            echo "WARNING: Builds/tests will work against an unknown remill version"
          fi

      - name: Download the cxx-common ${{ matrix.cxxcommon_version}} package
        shell: bash
        id: cxxcommon_installer
        working-directory: ${{ steps.build_paths.outputs.DOWNLOADS }}
        run: |
          folder_name="vcpkg_${{ matrix.image.name }}-${{ matrix.image.tag }}_llvm-${{ matrix.llvm }}_amd64"
          archive_name="${folder_name}.tar.xz"

          url="https://github.com/trailofbits/cxx-common/releases/download/${{ matrix.cxxcommon_version}}/${archive_name}"
          local_path="${{ steps.build_paths.outputs.DOWNLOADS }}/${archive_name}"

          if [[ ! -f "${local_path}" ]] ; then
            echo "Downloading: ${url}"
            curl "${url}" -L -o "${local_path}"

            ls -t ${{ steps.build_paths.outputs.DOWNLOADS }}/vcpkg_* | tail -n +2 | while read archive_file ; do
              rm "${archive_file}"
            done
          fi

          tar xf "${local_path}" \
              -C "${{ steps.build_paths.outputs.INSTALL }}"

          destination_path="${{ steps.build_paths.outputs.INSTALL }}/vcpkg"

          mv "${{ steps.build_paths.outputs.INSTALL }}/${folder_name}" \
             "${destination_path}"

          echo "${destination_path}/installed/x64-linux-rel/tools/llvm-${{matrix.llvm}}" >> $GITHUB_PATH

          echo ::set-output name=PATH::${destination_path}

      - name: Select the build job count
        shell: bash
        id: build_job_count
        run: |
          echo ::set-output name=VALUE::$(($(nproc) + 1))

      - name: Configure remill
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          mkdir remill_build && cd remill_build

          cmake \
              -DCMAKE_VERBOSE_MAKEFILE=true \
              -DVCPKG_ROOT="${{ steps.cxxcommon_installer.outputs.PATH }}" \
              -G Ninja \
              ${{ steps.build_paths.outputs.SOURCE }}/remill

      - name: Build remill
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          cmake --build remill_build \
                -j ${{ steps.build_job_count.VALUE }}

      - name: Install remill
        id: remill_installer
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          export DESTDIR=${{ steps.build_paths.outputs.INSTALL }}/remill

          cmake --build remill_build \
                --target install

          echo ::set-output name=PATH::${DESTDIR}

      - name: Configure anvill
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          mkdir anvill_build && cd anvill_build

          cmake \
              -DCMAKE_VERBOSE_MAKEFILE=true \
              -DVCPKG_ROOT="${{ steps.cxxcommon_installer.outputs.PATH }}" \
              -Dremill_DIR:PATH=${{ steps.remill_installer.outputs.PATH }}/usr/local/lib/cmake/remill \
              -DANVILL_ENABLE_TESTS=true \
              -DANVILL_ENABLE_INSTALL_TARGET=true \
              -G Ninja \
              ${{ steps.build_paths.outputs.SOURCE }}/anvill

      - name: Build anvill
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          cmake --build anvill_build \
                -j ${{ steps.build_job_count.VALUE }}

      - name: Install anvill
        id: anvill_installer
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          export DESTDIR=${{ steps.build_paths.outputs.INSTALL }}/anvill

          cmake --build anvill_build \
                --target install

          echo ::set-output name=PATH::${DESTDIR}

      - name: Install Binary Ninja

        env:
          BINJA_DECODE_KEY: ${{ secrets.BINJA_DECODE_KEY }}

        shell: bash
        working-directory: ${{ steps.build_paths.outputs.SOURCE }}/anvill/ci
        run: |
          ./install_binja.sh

      - name: Run the tests

        env:
          BINJA_DECODE_KEY: ${{ secrets.BINJA_DECODE_KEY }}
          CTEST_OUTPUT_ON_FAILURE: 1

        shell: bash
        working-directory: ${{ steps.build_paths.outputs.BUILD }}/anvill_build
        run: |
          ctest -V
 
      - name: Create the packages
        shell: bash
        working-directory: ${{ steps.build_paths.outputs.BUILD }}
        run: |
          anvill_tag=$(cd "${{ steps.build_paths.outputs.SOURCE }}/anvill" && git describe --tags --always --abbrev=0)
          anvill_commit=$(cd "${{ steps.build_paths.outputs.SOURCE }}/anvill" && git rev-parse HEAD | cut -c1-7)

          anvill_version="${anvill_tag:1}.${anvill_commit}"

          echo "Version: ${anvill_version}"

          cpack -D ANVILL_DATA_PATH="${{ steps.anvill_installer.outputs.PATH }}" \
                -R ${anvill_version} \
                --config "${{ steps.build_paths.outputs.SOURCE }}/anvill/packaging/main.cmake"

      - name: Locate the packages
        id: package_names
        shell: bash
        working-directory: ${{ steps.build_paths.outputs.BUILD }}
        run: |
          echo ::set-output name=DEB_PACKAGE_PATH::${{ steps.build_paths.outputs.REL_BUILD }}/$(ls *.deb)
          echo ::set-output name=RPM_PACKAGE_PATH::${{ steps.build_paths.outputs.REL_BUILD }}/$(ls *.rpm)
          echo ::set-output name=TGZ_PACKAGE_PATH::${{ steps.build_paths.outputs.REL_BUILD }}/$(ls *.tar.gz)

      - name: Store the DEB package
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.image.name }}-${{ matrix.image.tag }}_llvm${{ matrix.llvm }}_deb_package
          path: ${{ steps.package_names.outputs.DEB_PACKAGE_PATH }}

      - name: Store the RPM package
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.image.name }}-${{ matrix.image.tag }}_llvm${{ matrix.llvm }}_rpm_package
          path: ${{ steps.package_names.outputs.RPM_PACKAGE_PATH }}

      - name: Store the TGZ package
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.image.name }}-${{ matrix.image.tag }}_llvm${{ matrix.llvm }}_tgz_package
          path: ${{ steps.package_names.outputs.TGZ_PACKAGE_PATH }}




  # Note that we have a limit of 5 concurrent workers, org-wide.
  # It is best to try and keep the amount of macOS jobs as low
  # as possible.
  build_macos:
    needs: cleanup_stale_workflows

    strategy:
      fail-fast: false
      matrix:
        os: [ 'macos-11.0' ]
        llvm: [ '11' ]
        cxxcommon_version: [ 'v0.1.1' ]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Setup the build paths
        shell: bash
        id: build_paths
        run: |
          rel_build_path="build"
          rel_source_path="src"
          rel_install_path="install"
          rel_downloads_path="downloads"
          rel_ccache_path="ccache"

          mkdir -p ${rel_build_path} \
                   ${rel_install_path} \
                   ${rel_downloads_path} \
                   ${rel_ccache_path}

          echo ::set-output name=SOURCE::$(pwd)/${rel_source_path}
          echo ::set-output name=REL_SOURCE::${rel_source_path}
          echo ::set-output name=BUILD::$(pwd)/${rel_build_path}
          echo ::set-output name=REL_BUILD::${rel_build_path}
          echo ::set-output name=INSTALL::$(pwd)/${rel_install_path}
          echo ::set-output name=DOWNLOADS::$(pwd)/${rel_downloads_path}
          echo ::set-output name=CCACHE::$(pwd)/${rel_ccache_path}

      - name: Update the cache (downloads)
        uses: actions/cache@v2
        with:
          path: ${{ steps.build_paths.outputs.DOWNLOADS }}

          key: |
            gitmodules_${{ matrix.os }}_${{ matrix.llvm }}_${{ github.sha }}

          restore-keys: |
            gitmodules_${{ matrix.os }}_${{ matrix.llvm }}

      - name: Update the cache (ccache)
        uses: actions/cache@v2
        with:
          path: ${{ steps.build_paths.outputs.CCACHE }}

          key: |
            gitmodules_${{ matrix.os }}_${{ matrix.llvm }}_${{ github.sha }}

          restore-keys: |
            gitmodules_${{ matrix.os }}_${{ matrix.llvm }}

      - name: Install system dependencies
        shell: bash
        run: |
          brew install ccache \
                       ninja

      - name: Clone the anvill repository
        uses: actions/checkout@v2
        with:
          path: ${{ steps.build_paths.outputs.REL_SOURCE }}/anvill
          fetch-depth: 0
          submodules: true

      - name: Clone the remill repository
        uses: actions/checkout@v2
        with:
          repository: 'lifting-bits/remill'
          path: ${{ steps.build_paths.outputs.REL_SOURCE }}/remill
          fetch-depth: 0

      - name: Select the remill version
        run: |
          remill_commit_id_path="${{ steps.build_paths.outputs.SOURCE }}/anvill/.remill_commit_id"

          if [[ -f "${remill_commit_id_path}" ]] ; then
            remill_commit_id=$(cat ${remill_commit_id_path})
            echo "Using the following remill commit: ${remill_commit_id}"

            cd ${{ steps.build_paths.outputs.SOURCE }}/remill
            git checkout -b remill_commit_id "${remill_commit_id}"

          else
            echo "WARNING: Builds/tests will work against an unknown remill version"
          fi

      - name: Download the cxx-common ${{ matrix.cxxcommon_version}} package
        shell: bash
        id: cxxcommon_installer
        working-directory: ${{ steps.build_paths.outputs.DOWNLOADS }}
        run: |
          folder_name="vcpkg_macos-11.0_llvm-${{ matrix.llvm }}_xcode-12.2.0_amd64"
          archive_name="${folder_name}.tar.xz"

          url="https://github.com/trailofbits/cxx-common/releases/download/${{ matrix.cxxcommon_version}}/${archive_name}"
          local_path="${{ steps.build_paths.outputs.DOWNLOADS }}/${archive_name}"

          if [[ ! -f "${local_path}" ]] ; then
            echo "Downloading: ${url}"
            curl "${url}" -L -o "${local_path}"

            ls -t ${{ steps.build_paths.outputs.DOWNLOADS }}/vcpkg_* | tail -n +2 | while read archive_file ; do
              rm "${archive_file}"
            done
          fi

          tar xf "${local_path}" \
              -C "${{ steps.build_paths.outputs.INSTALL }}"

          destination_path="${{ steps.build_paths.outputs.INSTALL }}/vcpkg"

          mv "${{ steps.build_paths.outputs.INSTALL }}/${folder_name}" \
             "${destination_path}"

          echo "${destination_path}/installed/x64-osx-rel/bin" >> $GITHUB_PATH

          echo ::set-output name=PATH::${destination_path}

      - name: Select the build job count
        shell: bash
        id: build_job_count
        run: |
          echo ::set-output name=VALUE::$(($(sysctl -n hw.logicalcpu) + 1))

      - name: Configure remill
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          mkdir remill_build && cd remill_build

          cmake \
              -DCMAKE_VERBOSE_MAKEFILE=true \
              -DVCPKG_ROOT="${{ steps.cxxcommon_installer.outputs.PATH }}" \
              -G Ninja \
              ${{ steps.build_paths.outputs.SOURCE }}/remill

      - name: Build remill
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          cmake --build remill_build \
                -j ${{ steps.build_job_count.VALUE }}

      - name: Install remill
        id: remill_installer
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          export DESTDIR=${{ steps.build_paths.outputs.INSTALL }}/remill

          cmake --build remill_build \
                --target install

          echo ::set-output name=PATH::${DESTDIR}

      - name: Configure anvill
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          mkdir anvill_build && cd anvill_build

          cmake \
              -DCMAKE_VERBOSE_MAKEFILE=true \
              -DVCPKG_ROOT="${{ steps.cxxcommon_installer.outputs.PATH }}" \
              -Dremill_DIR:PATH=${{ steps.remill_installer.outputs.PATH }}/usr/local/lib/cmake/remill \
              -DANVILL_ENABLE_TESTS=true \
              -DANVILL_ENABLE_INSTALL_TARGET=true \
              -G Ninja \
              ${{ steps.build_paths.outputs.SOURCE }}/anvill

      - name: Build anvill
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          cmake --build anvill_build \
                -j ${{ steps.build_job_count.VALUE }}

      - name: Install anvill
        id: anvill_installer
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          export DESTDIR=${{ steps.build_paths.outputs.INSTALL }}/anvill

          cmake --build anvill_build \
                --target install

          echo ::set-output name=PATH::${DESTDIR}

      - name: Create the packages
        shell: bash
        working-directory: ${{ steps.build_paths.outputs.BUILD }}
        run: |
          anvill_tag=$(cd "${{ steps.build_paths.outputs.SOURCE }}/anvill" && git describe --tags --always --abbrev=0)
          anvill_commit=$(cd "${{ steps.build_paths.outputs.SOURCE }}/anvill" && git rev-parse HEAD | cut -c1-7)

          anvill_version="${anvill_tag:1}.${anvill_commit}"

          echo "Version: ${anvill_version}"

          cpack -D ANVILL_DATA_PATH="${{ steps.anvill_installer.outputs.PATH }}" \
                -R ${anvill_version} \
                --config "${{ steps.build_paths.outputs.SOURCE }}/anvill/packaging/main.cmake"

      - name: Locate the packages
        id: package_names
        shell: bash
        working-directory: ${{ steps.build_paths.outputs.BUILD }}
        run: |
          echo ::set-output name=TGZ_PACKAGE_PATH::${{ steps.build_paths.outputs.REL_BUILD }}/$(ls *.tar.gz)

      - name: Store the TGZ package
        uses: actions/upload-artifact@v1
        with:
          name: macos-11.0_llvm${{ matrix.llvm }}_tgz_package
          path: ${{ steps.package_names.outputs.TGZ_PACKAGE_PATH }}




  release_linux:
    # Do not run the release procedure if any of the builds has failed
    needs: [ build_linux, build_macos ]
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v2

      - name: Draft the new release
        id: create_release
        uses: actions/create-release@v1

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        with:
          tag_name: ${{ github.ref }}
          release_name: Version ${{ github.ref }}
          draft: true
          prerelease: true

      - name: Group the packages by platform
        run: |
          zip -r9 ubuntu-18.04_packages.zip \
                  ubuntu-18.04*

          zip -r9 ubuntu-20.04_packages.zip \
                  ubuntu-20.04*

      - name: Upload the Ubuntu 18.04 packages
        uses: actions/upload-release-asset@v1

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ubuntu-18.04_packages.zip
          asset_name: ubuntu-18.04_packages
          asset_content_type: application/gzip

      - name: Upload the Ubuntu 20.04 packages
        uses: actions/upload-release-asset@v1

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ubuntu-20.04_packages.zip
          asset_name: ubuntu-20.04_packages
          asset_content_type: application/gzip




  release_macos:
    # Do not run the release procedure if any of the builds has failed
    needs: [ build_linux, build_macos ]
    runs-on: 'macos-11.0'
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v2

      - name: Draft the new release
        id: create_release
        uses: actions/create-release@v1

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        with:
          tag_name: ${{ github.ref }}
          release_name: Version ${{ github.ref }}
          draft: true
          prerelease: true

      - name: Group the packages by platform
        run: |
          zip -r9 macos-11.0_packages.zip \
                  macos-11.0*

      - name: Upload the macOS 11.0 packages
        uses: actions/upload-release-asset@v1

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: macos-11.0_packages.zip
          asset_name: macos-11.0_packages
          asset_content_type: application/gzip
