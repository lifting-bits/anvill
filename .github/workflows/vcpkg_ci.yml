name: VCPKG Continuous Integration
on:
  push:
    branches:
      - master

  pull_request:
  schedule:
    # run CI every day even if no PRs/merges occur
    - cron:  '0 6 * * *'

jobs:
  build_linux:
    strategy:
      fail-fast: false
      matrix:
        image:
          - { name: 'ubuntu', tag: '18.04' }
          - { name: 'ubuntu', tag: '20.04' }

        llvm: [ '9', '10', '11' ]
        cxxcommon_version: [ 'v0.1.1' ]

    runs-on: ubuntu-20.04
    container:
      image: docker.pkg.github.com/trailofbits/cxx-common/vcpkg-builder-${{ matrix.image.name }}:${{ matrix.image.tag }}

      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Setup the build paths
        shell: bash
        id: build_paths
        run: |
          rel_build_path="build"
          rel_source_path="src"
          rel_install_path="install"
          rel_downloads_path="downloads"
          rel_ccache_path="ccache"

          mkdir -p ${rel_build_path} \
                   ${rel_install_path} \
                   ${rel_downloads_path} \
                   ${rel_ccache_path}

          echo ::set-output name=SOURCE::$(pwd)/${rel_source_path}
          echo ::set-output name=REL_SOURCE::${rel_source_path}
          echo ::set-output name=BUILD::$(pwd)/${rel_build_path}
          echo ::set-output name=INSTALL::$(pwd)/${rel_install_path}
          echo ::set-output name=DOWNLOADS::$(pwd)/${rel_downloads_path}
          echo ::set-output name=CCACHE::$(pwd)/${rel_ccache_path}

      - name: Update the cache (downloads)
        uses: actions/cache@v2
        with:
          path: ${{ steps.build_paths.outputs.DOWNLOADS }}

          key: |
            gitmodules_${{ matrix.image.name }}_${{ matrix.image.tag }}_${{ matrix.llvm }}_${{ github.sha }}

          restore-keys: |
            gitmodules_${{ matrix.image.name }}_${{ matrix.image.tag }}_${{ matrix.llvm }}

      - name: Update the cache (ccache)
        uses: actions/cache@v2
        with:
          path: ${{ steps.build_paths.outputs.CCACHE }}

          key: |
            gitmodules_${{ matrix.image.name }}_${{ matrix.image.tag }}_${{ matrix.llvm }}_${{ github.sha }}

          restore-keys: |
            gitmodules_${{ matrix.image.name }}_${{ matrix.image.tag }}_${{ matrix.llvm }}

      - name: Install system dependencies
        shell: bash
        run: |
          apt-get update
          apt-get install -y pixz \
                             xz-utils \
                             make \
                             ninja-build \
                             ccache

      - name: Clone the anvill repository
        uses: actions/checkout@v2
        with:
          path: ${{ steps.build_paths.outputs.REL_SOURCE }}/anvill

      - name: Clone the remill repository
        uses: actions/checkout@v2
        with:
          repository: 'lifting-bits/remill'
          path: ${{ steps.build_paths.outputs.REL_SOURCE }}/remill

      - name: Select the remill version
        run: |
          remill_commit_id_path="${{ steps.build_paths.outputs.SOURCE }}/anvill/.remill_commit_id"

          if [[ -f "${remill_commit_id_path}" ]] ; then
            remill_commit_id=$(cat ${remill_commit_id_path})
            echo "Using the following remill commit: ${remill_commit_id}"

            cd ${{ steps.build_paths.outputs.SOURCE }}/remill
            git checkout -b remill_commit_id "${remill_commit_id}"

          else
            echo "WARNING: Builds/tests will work against an unknown remill version"
          fi

      - name: Download the cxx-common ${{ matrix.cxxcommon_version}} package
        shell: bash
        id: cxxcommon_installer
        working-directory: ${{ steps.build_paths.outputs.DOWNLOADS }}
        run: |
          folder_name="vcpkg_${{ matrix.image.name }}-${{ matrix.image.tag }}_llvm-${{ matrix.llvm }}_amd64"
          archive_name="${folder_name}.tar.xz"

          url="https://github.com/trailofbits/cxx-common/releases/download/${{ matrix.cxxcommon_version}}/${archive_name}"
          local_path="${{ steps.build_paths.outputs.DOWNLOADS }}/${archive_name}"

          if [[ ! -f "${local_path}" ]]; then
            echo "Downloading: ${url}"
            curl "${url}" -L -o "${local_path}"

            ls -t ${{ steps.build_paths.outputs.DOWNLOADS }}/vcpkg_* | tail -n +2 | while read archive_file ; do
              rm "${archive_file}"
            done
          fi

          tar xf "${local_path}" \
              -C "${{ steps.build_paths.outputs.INSTALL }}"

          destination_path="${{ steps.build_paths.outputs.INSTALL }}/vcpkg"

          mv "${{ steps.build_paths.outputs.INSTALL }}/${folder_name}" \
             "${destination_path}"

          echo "${destination_path}/installed/x64-linux/tools/llvm-11" >> $GITHUB_PATH

          echo ::set-output name=PATH::${destination_path}

      - name: Select the build job count
        shell: bash
        id: build_job_count
        run: |
          echo ::set-output name=VALUE::$(($(nproc) + 1))

      - name: Configure remill
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          mkdir remill_build && cd remill_build

          cmake \
              -DCMAKE_VERBOSE_MAKEFILE=true \
              -DVCPKG_ROOT="${{ steps.cxxcommon_installer.outputs.PATH }}" \
              -G Ninja \
              ${{ steps.build_paths.outputs.SOURCE }}/remill

      - name: Build remill
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          cmake --build remill_build \
                -j ${{ steps.build_job_count.VALUE }}

      - name: Install remill
        id: remill_installer
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          export DESTDIR=${{ steps.build_paths.outputs.INSTALL }}/remill

          cmake --build remill_build \
                --target install

          echo ::set-output name=PATH::${DESTDIR}

      - name: Configure anvill
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          mkdir anvill_build && cd anvill_build

          cmake \
              -DCMAKE_VERBOSE_MAKEFILE=true \
              -DVCPKG_ROOT="${{ steps.cxxcommon_installer.outputs.PATH }}" \
              -Dremill_DIR:PATH=${{ steps.remill_installer.outputs.PATH }}/usr/local/lib/cmake/remill \
              -DANVILL_ENABLE_TESTS=true \
              -DANVILL_ENABLE_INSTALL_TARGET=true \
              -G Ninja \
              ${{ steps.build_paths.outputs.SOURCE }}/anvill

      - name: Build anvill
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          cmake --build anvill_build \
                -j ${{ steps.build_job_count.VALUE }}

      - name: Test anvill-decompile-json
        shell: bash
        working-directory: ${{ steps.build_paths.outputs.BUILD }}/anvill_build
        run: |
          ./tools/decompile-json/anvill-decompile-json-${{ matrix.llvm }}.0 \
            -spec ${{ steps.build_paths.outputs.SOURCE }}/anvill/tools/decompile-json/tests/examples/ret0.json \
            -bc_out ./ret0.bc \
            -ir_out ret0.ir

      - name: Install Binary Ninja

        env:
          BINJA_DECODE_KEY: ${{ secrets.BINJA_DECODE_KEY }}

        shell: bash
        working-directory: ${{ steps.build_paths.outputs.SOURCE }}/anvill/ci
        run: |
          ./install_binja.sh

      - name: Run the tests

        env:
          BINJA_DECODE_KEY: ${{ secrets.BINJA_DECODE_KEY }}
          CTEST_OUTPUT_ON_FAILURE: 1

        shell: bash
        working-directory: ${{ steps.build_paths.outputs.build }}
        run: |
          cmake --build anvill_build \
                --target test




  build_mac:
    strategy:
      fail-fast: false
      matrix:
        os: [ 'macos-10.15', 'macos-11.0' ]
        llvm: [ '9', '10', '11' ]
        cxxcommon_version: [ 'v0.1.1' ]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Setup the build paths
        shell: bash
        id: build_paths
        run: |
          rel_build_path="build"
          rel_source_path="src"
          rel_install_path="install"
          rel_downloads_path="downloads"
          rel_ccache_path="ccache"

          mkdir -p ${rel_build_path} \
                   ${rel_install_path} \
                   ${rel_downloads_path} \
                   ${rel_ccache_path}

          echo ::set-output name=SOURCE::$(pwd)/${rel_source_path}
          echo ::set-output name=REL_SOURCE::${rel_source_path}
          echo ::set-output name=BUILD::$(pwd)/${rel_build_path}
          echo ::set-output name=INSTALL::$(pwd)/${rel_install_path}
          echo ::set-output name=DOWNLOADS::$(pwd)/${rel_downloads_path}
          echo ::set-output name=CCACHE::$(pwd)/${rel_ccache_path}

      - name: Update the cache (downloads)
        uses: actions/cache@v2
        with:
          path: ${{ steps.build_paths.outputs.DOWNLOADS }}

          key: |
            gitmodules_${{ matrix.os }}_${{ matrix.llvm }}_${{ github.sha }}

          restore-keys: |
            gitmodules_${{ matrix.os }}_${{ matrix.llvm }}

      - name: Update the cache (ccache)
        uses: actions/cache@v2
        with:
          path: ${{ steps.build_paths.outputs.CCACHE }}

          key: |
            gitmodules_${{ matrix.os }}_${{ matrix.llvm }}_${{ github.sha }}

          restore-keys: |
            gitmodules_${{ matrix.os }}_${{ matrix.llvm }}

      - name: Install system dependencies
        shell: bash
        run: |
          brew install ccache \
                       ninja

      - name: Clone the anvill repository
        uses: actions/checkout@v2
        with:
          path: ${{ steps.build_paths.outputs.REL_SOURCE }}/anvill

      - name: Clone the remill repository
        uses: actions/checkout@v2
        with:
          repository: 'lifting-bits/remill'
          path: ${{ steps.build_paths.outputs.REL_SOURCE }}/remill

      - name: Select the remill version
        run: |
          remill_commit_id_path="${{ steps.build_paths.outputs.SOURCE }}/anvill/.remill_commit_id"

          if [[ -f "${remill_commit_id_path}" ]] ; then
            remill_commit_id=$(cat ${remill_commit_id_path})
            echo "Using the following remill commit: ${remill_commit_id}"

            cd ${{ steps.build_paths.outputs.SOURCE }}/remill
            git checkout -b remill_commit_id "${remill_commit_id}"

          else
            echo "WARNING: Builds/tests will work against an unknown remill version"
          fi

      - name: Download the cxx-common ${{ matrix.cxxcommon_version}} package
        shell: bash
        id: cxxcommon_installer
        working-directory: ${{ steps.build_paths.outputs.DOWNLOADS }}
        run: |
          folder_name="vcpkg_${{ matrix.os }}_llvm-${{ matrix.llvm }}_xcode-12.1.0_amd64"
          archive_name="${folder_name}.tar.xz"

          url="https://github.com/trailofbits/cxx-common/releases/download/${{ matrix.cxxcommon_version}}/${archive_name}"
          local_path="${{ steps.build_paths.outputs.DOWNLOADS }}/${archive_name}"

          if [[ ! -f "${local_path}" ]]; then
            echo "Downloading: ${url}"
            curl "${url}" -L -o "${local_path}"

            ls -t ${{ steps.build_paths.outputs.DOWNLOADS }}/vcpkg_* | tail -n +2 | while read archive_file ; do
              rm "${archive_file}"
            done
          fi

          tar xf "${local_path}" \
              -C "${{ steps.build_paths.outputs.INSTALL }}"

          destination_path="${{ steps.build_paths.outputs.INSTALL }}/vcpkg"

          mv "${{ steps.build_paths.outputs.INSTALL }}/${folder_name}" \
             "${destination_path}"

          echo "${destination_path}/installed/x64-osx-rel/bin" >> $GITHUB_PATH

          echo ::set-output name=PATH::${destination_path}

      - name: Select the build job count
        shell: bash
        id: build_job_count
        run: |
          echo ::set-output name=VALUE::$(($(sysctl -n hw.logicalcpu) + 1))

      - name: Configure remill
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          mkdir remill_build && cd remill_build

          cmake \
              -DCMAKE_VERBOSE_MAKEFILE=true \
              -DVCPKG_ROOT="${{ steps.cxxcommon_installer.outputs.PATH }}" \
              -G Ninja \
              ${{ steps.build_paths.outputs.SOURCE }}/remill

      - name: Build remill
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          cmake --build remill_build \
                -j ${{ steps.build_job_count.VALUE }}

      - name: Install remill
        id: remill_installer
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          export DESTDIR=${{ steps.build_paths.outputs.INSTALL }}/remill

          cmake --build remill_build \
                --target install

          echo ::set-output name=PATH::${DESTDIR}

      - name: Configure anvill
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          mkdir anvill_build && cd anvill_build

          cmake \
              -DCMAKE_VERBOSE_MAKEFILE=true \
              -DVCPKG_ROOT="${{ steps.cxxcommon_installer.outputs.PATH }}" \
              -Dremill_DIR:PATH=${{ steps.remill_installer.outputs.PATH }}/usr/local/lib/cmake/remill \
              -DANVILL_ENABLE_TESTS=true \
              -DANVILL_ENABLE_INSTALL_TARGET=true \
              -G Ninja \
              ${{ steps.build_paths.outputs.SOURCE }}/anvill

      - name: Build anvill
        working-directory: ${{ steps.build_paths.outputs.BUILD }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          cmake --build anvill_build \
                -j ${{ steps.build_job_count.VALUE }}

      - name: Test anvill-decompile-json
        shell: bash
        working-directory: ${{ steps.build_paths.outputs.BUILD }}/anvill_build
        run: |
          ./tools/decompile-json/anvill-decompile-json-${{ matrix.llvm }}.0 \
            -spec ${{ steps.build_paths.outputs.SOURCE }}/anvill/tools/decompile-json/tests/examples/ret0.json \
            -bc_out ./ret0.bc \
            -ir_out ret0.ir
